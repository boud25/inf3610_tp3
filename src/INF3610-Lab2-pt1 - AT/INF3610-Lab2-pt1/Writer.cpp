///////////////////////////////////////////////////////////////////////////////
//
//	Writer.cpp
//
///////////////////////////////////////////////////////////////////////////////
#include "Writer.h"

///////////////////////////////////////////////////////////////////////////////
//
//	Constructor
//
///////////////////////////////////////////////////////////////////////////////
Writer::Writer(sc_module_name name)
	: sc_channel(name)
{
	/*

	À compléter

	*/
	SC_THREAD(thread);
}

///////////////////////////////////////////////////////////////////////////////
//
//	Destructor
//
///////////////////////////////////////////////////////////////////////////////
Writer::~Writer()
{
	/*

	À compléter

	*/
}

///////////////////////////////////////////////////////////////////////////////
//
//	Thread
//
///////////////////////////////////////////////////////////////////////////////
void Writer::thread(void)
{
	/*

	À compléter

	*/
	while (1)
	{
		// Synchronize with bubble
		do
		{
			wait(clk.posedge_event());
		} while (!request.read());
		ack.write(false);

		// Gather the address and the data to write
		unsigned int adrs = address.read();
		unsigned int d = data.read();

		// Write the data in memory
		dataPortRAM->Write(adrs, d);
		
		// Ack bubble that the request was served
		ack.write(true);
	}
}